#!/usr/bin/env node

// import { DeploymentReadinessChecker } from './deployment-readiness-checker.js';

/**
 * „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊ∫ñÂÇô„ÉÅ„Çß„ÉÉ„Ç´„Éº„ÅÆ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥
 */
async function demonstrateDeploymentReadinessChecker() {
  console.log('üöÄ Deployment Readiness Checker Demo');
  console.log('=====================================\n');

  try {
    // „ÉÅ„Çß„ÉÉ„Ç´„Éº„ÅÆÂàùÊúüÂåñ
    console.log('üìã Initializing Deployment Readiness Checker...');
    const checker = new DeploymentReadinessChecker();
    await checker.initialize();
    console.log('‚úÖ Initialization completed\n');

    // „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊ∫ñÂÇôÁä∂Ê≥Å„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('üîç Checking deployment readiness...');
    const startTime = Date.now();
    const readiness = await checker.checkDeploymentReadiness();
    const checkDuration = Date.now() - startTime;
    
    console.log(`‚úÖ Readiness check completed in ${checkDuration}ms\n`);

    // ÁµêÊûú„ÅÆË°®Á§∫
    console.log('üìä DEPLOYMENT READINESS RESULTS');
    console.log('================================');
    console.log(`Status: ${readiness.ready ? '‚úÖ READY FOR DEPLOYMENT' : 'üö´ NOT READY'}`);
    console.log(`Score: ${readiness.score}/100`);
    console.log(`Timestamp: ${readiness.timestamp.toISOString()}\n`);

    // ÂìÅË≥™„Ç≤„Éº„Éà„ÅÆÁµêÊûú
    console.log('üèÅ Quality Gates:');
    readiness.qualityGates.forEach(gate => {
      const status = gate.status === 'pass' ? '‚úÖ' : gate.status === 'fail' ? '‚ùå' : '‚ö†Ô∏è';
      const blocking = gate.blocking ? ' (BLOCKING)' : '';
      console.log(`  ${status} ${gate.name}${blocking}`);
      
      gate.criteria.forEach(criteria => {
        const criteriaStatus = criteria.passed ? '‚úÖ' : '‚ùå';
        console.log(`    ${criteriaStatus} ${criteria.metric}: ${criteria.actual} ${criteria.operator} ${criteria.threshold}`);
      });
    });
    console.log();

    // „Éñ„É≠„ÉÉ„Ç´„Éº„ÅÆË°®Á§∫
    if (readiness.blockers.length > 0) {
      console.log(`üö´ Deployment Blockers (${readiness.blockers.length}):`);
      readiness.blockers.forEach((blocker, index) => {
        console.log(`  ${index + 1}. ${blocker.description}`);
        console.log(`     Category: ${blocker.category}`);
        console.log(`     Auto-fixable: ${blocker.autoFixable ? 'Yes' : 'No'}`);
        console.log(`     Resolution: ${blocker.resolution}`);
      });
      console.log();
    }

    // Ë≠¶Âëä„ÅÆË°®Á§∫
    if (readiness.warnings.length > 0) {
      console.log(`‚ö†Ô∏è Warnings (${readiness.warnings.length}):`);
      readiness.warnings.forEach((warning, index) => {
        console.log(`  ${index + 1}. ${warning.description}`);
        console.log(`     Category: ${warning.category}`);
        console.log(`     Recommendation: ${warning.recommendation}`);
      });
      console.log();
    }

    // Êé®Â•®‰∫ãÈ†Ö„ÅÆË°®Á§∫
    console.log('üí° Recommendations:');
    readiness.recommendations.forEach(rec => {
      console.log(`  ${rec}`);
    });
    console.log();

    // „Éá„Éó„É≠„Ç§Ë®±ÂèØ„ÅÆ„ÉÜ„Çπ„Éà
    if (readiness.ready) {
      console.log('üé´ Granting deployment permission...');
      try {
        const permission = await checker.grantDeploymentPermission(readiness);
        console.log('‚úÖ Deployment permission granted!');
        console.log(`   Granted at: ${permission.grantedAt.toISOString()}`);
        console.log(`   Valid until: ${permission.validUntil.toISOString()}`);
        console.log(`   Approver: ${permission.approver}`);
        console.log('   Conditions:');
        permission.conditions.forEach(condition => {
          console.log(`     ‚Ä¢ ${condition}`);
        });
        console.log();
      } catch (error) {
        console.log(`‚ùå Failed to grant permission: ${error.message}\n`);
      }
    } else {
      console.log('üö´ Deployment permission denied due to blockers\n');
    }

    // „Éá„Éó„É≠„Ç§ÂæåÊ§úË®º„ÅÆ„Éá„É¢
    console.log('üîç Running post-deployment verification demo...');
    const verificationResult = await checker.runPostDeploymentVerification();
    
    if (verificationResult.success) {
      console.log('‚úÖ Post-deployment verification passed');
    } else {
      console.log('‚ùå Post-deployment verification failed');
      console.log('   Issues detected:');
      verificationResult.issues.forEach(issue => {
        console.log(`     ‚Ä¢ ${issue}`);
      });
    }
    console.log();

    // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à
    console.log('üìà Performance Statistics:');
    console.log(`   Readiness check duration: ${checkDuration}ms`);
    console.log(`   Quality gates evaluated: ${readiness.qualityGates.length}`);
    console.log(`   Total criteria checked: ${readiness.qualityGates.reduce((sum, gate) => sum + gate.criteria.length, 0)}`);
    console.log();

    // „Éï„Ç°„Ç§„É´Âá∫Âäõ„ÅÆÁ¢∫Ë™ç
    console.log('üìÅ Generated Files:');
    const { promises: fs } = await import('fs');
    const reportsDir = '.kiro/reports';
    
    try {
      const files = await fs.readdir(reportsDir);
      const deploymentFiles = files.filter(file => 
        file.startsWith('deployment-readiness-') || file.startsWith('deployment-permission-')
      );
      
      deploymentFiles.forEach(file => {
        console.log(`   üìÑ ${file}`);
      });
      
      if (deploymentFiles.length === 0) {
        console.log('   (No deployment files found)');
      }
    } catch (error) {
      console.log(`   ‚ùå Error reading reports directory: ${error.message}`);
    }

    console.log('\nüéâ Deployment Readiness Checker demo completed successfully!');

  } catch (error) {
    console.error('‚ùå Demo failed:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    process.exit(1);
  }
}

/**
 * Ë©≥Á¥∞„Å™„Éá„Éó„É≠„Ç§„É°„É≥„ÉàÊ∫ñÂÇôÁä∂Ê≥Å„ÅÆÂàÜÊûê
 */
async function analyzeDeploymentReadiness() {
  console.log('\nüî¨ DETAILED DEPLOYMENT READINESS ANALYSIS');
  console.log('==========================================\n');

  try {
    const checker = new DeploymentReadinessChecker();
    await checker.initialize();

    const readiness = await checker.checkDeploymentReadiness();

    // ÂìÅË≥™„Ç≤„Éº„ÉàÂàÜÊûê
    console.log('üìä Quality Gate Analysis:');
    const passedGates = readiness.qualityGates.filter(gate => gate.status === 'pass').length;
    const failedGates = readiness.qualityGates.filter(gate => gate.status === 'fail').length;
    const warningGates = readiness.qualityGates.filter(gate => gate.status === 'warning').length;
    const blockingGates = readiness.qualityGates.filter(gate => gate.blocking).length;

    console.log(`   Total gates: ${readiness.qualityGates.length}`);
    console.log(`   Passed: ${passedGates} ‚úÖ`);
    console.log(`   Failed: ${failedGates} ‚ùå`);
    console.log(`   Warnings: ${warningGates} ‚ö†Ô∏è`);
    console.log(`   Blocking gates: ${blockingGates}`);
    console.log();

    // „É™„Çπ„ÇØÂàÜÊûê
    console.log('‚ö†Ô∏è Risk Analysis:');
    const criticalBlockers = readiness.blockers.filter(b => b.category === 'critical_test_failure').length;
    const performanceBlockers = readiness.blockers.filter(b => b.category === 'performance_threshold').length;
    const securityBlockers = readiness.blockers.filter(b => b.category === 'security_issue').length;
    const autoFixableBlockers = readiness.blockers.filter(b => b.autoFixable).length;

    console.log(`   Critical test failures: ${criticalBlockers}`);
    console.log(`   Performance issues: ${performanceBlockers}`);
    console.log(`   Security issues: ${securityBlockers}`);
    console.log(`   Auto-fixable issues: ${autoFixableBlockers}/${readiness.blockers.length}`);
    console.log();

    // ÂìÅË≥™„Éà„É¨„É≥„ÉâÔºà„Ç∑„Éü„É•„É¨„Éº„ÉàÔºâ
    console.log('üìà Quality Trends (Simulated):');
    const previousScore = Math.max(0, readiness.score - Math.random() * 20 + 10);
    const trend = readiness.score > previousScore ? 'üìà Improving' : 'üìâ Declining';
    console.log(`   Current score: ${readiness.score}/100`);
    console.log(`   Previous score: ${previousScore.toFixed(1)}/100`);
    console.log(`   Trend: ${trend}`);
    console.log();

    // Êé®ÂÆö‰øÆÊ≠£ÊôÇÈñì
    console.log('‚è±Ô∏è Estimated Fix Time:');
    const estimatedHours = readiness.blockers.reduce((total, blocker) => {
      const timeMap = {
        'critical_test_failure': 4,
        'performance_threshold': 6,
        'security_issue': 8,
        'dependency_issue': 2
      };
      return total + (timeMap[blocker.category] || 3);
    }, 0);

    if (estimatedHours > 0) {
      console.log(`   Estimated fix time: ${estimatedHours} hours`);
      console.log(`   Recommended deployment delay: ${Math.ceil(estimatedHours / 8)} business days`);
    } else {
      console.log('   No fixes required - ready for immediate deployment');
    }

  } catch (error) {
    console.error('‚ùå Analysis failed:', error.message);
  }
}

// „É°„Ç§„É≥ÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  await demonstrateDeploymentReadinessChecker();
  await analyzeDeploymentReadiness();
}