#!/usr/bin/env node

/**
 * PreviewÁí∞Â¢É„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆ„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
 * dev „Éñ„É©„É≥„ÉÅ„ÅÆpush„Åã„ÇâPreview URL„ÅÆÁîüÊàê„Åæ„Åß„ÅÆÊµÅ„Çå„Çí„ÉÜ„Çπ„Éà„Åô„Çã
 */

import { execSync } from 'child_process';
import fs from 'fs';

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(color, message) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„ÇíÁ¢∫Ë™ç
 */
function getCurrentBranch() {
  try {
    return execSync('git branch --show-current', { encoding: 'utf8' }).trim();
  } catch (error) {
    log(colors.red, '‚ùå Failed to get current branch');
    return null;
  }
}

/**
 * Git„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
 */
function checkGitStatus() {
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    return status.trim().length === 0;
  } catch (error) {
    log(colors.red, '‚ùå Failed to check git status');
    return false;
  }
}

/**
 * vercel.json„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç
 */
function checkVercelConfig() {
  try {
    const config = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
    const devEnabled = config.git?.deploymentEnabled?.dev;
    
    if (devEnabled) {
      log(colors.green, '‚úÖ dev branch deployment is enabled in vercel.json');
      return true;
    } else {
      log(colors.red, '‚ùå dev branch deployment is not enabled in vercel.json');
      return false;
    }
  } catch (error) {
    log(colors.red, '‚ùå Failed to read vercel.json');
    return false;
  }
}

/**
 * GitHub Actions„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç
 */
function checkGitHubActions() {
  try {
    const workflow = fs.readFileSync('.github/workflows/ci.yml', 'utf8');
    
    const checks = [
      { name: 'preview-deployment job', pattern: /preview-deployment:/ },
      { name: 'dev branch trigger', pattern: /github\.ref == 'refs\/heads\/dev'/ },
      { name: 'get-preview-url script', pattern: /get-preview-url\.mjs/ },
      { name: 'PR comment functionality', pattern: /gh pr comment/ }
    ];

    let allPassed = true;
    
    for (const check of checks) {
      if (check.pattern.test(workflow)) {
        log(colors.green, `‚úÖ ${check.name} is configured`);
      } else {
        log(colors.red, `‚ùå ${check.name} is missing`);
        allPassed = false;
      }
    }
    
    return allPassed;
  } catch (error) {
    log(colors.red, '‚ùå Failed to read GitHub Actions workflow');
    return false;
  }
}

/**
 * ÂøÖË¶Å„Å™„Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
 */
function checkScriptFiles() {
  const requiredScripts = [
    'scripts/get-preview-url.mjs',
    'scripts/verify-preview-env.mjs'
  ];

  let allExist = true;
  
  for (const script of requiredScripts) {
    if (fs.existsSync(script)) {
      log(colors.green, `‚úÖ ${script} exists`);
    } else {
      log(colors.red, `‚ùå ${script} is missing`);
      allExist = false;
    }
  }
  
  return allExist;
}

/**
 * package.json„ÅÆ„Çπ„ÇØ„É™„Éó„ÉàÁ¢∫Ë™ç
 */
function checkPackageScripts() {
  try {
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const webPkg = JSON.parse(fs.readFileSync('apps/web/package.json', 'utf8'));
    
    const requiredRootScripts = ['preview:verify', 'preview:url'];
    const requiredWebScripts = ['preview:verify', 'preview:url'];
    
    let allPresent = true;
    
    for (const script of requiredRootScripts) {
      if (pkg.scripts[script]) {
        log(colors.green, `‚úÖ Root package.json has ${script} script`);
      } else {
        log(colors.red, `‚ùå Root package.json missing ${script} script`);
        allPresent = false;
      }
    }
    
    for (const script of requiredWebScripts) {
      if (webPkg.scripts[script]) {
        log(colors.green, `‚úÖ Web package.json has ${script} script`);
      } else {
        log(colors.red, `‚ùå Web package.json missing ${script} script`);
        allPresent = false;
      }
    }
    
    return allPresent;
  } catch (error) {
    log(colors.red, '‚ùå Failed to check package.json scripts');
    return false;
  }
}

/**
 * Áí∞Â¢ÉÂ§âÊï∞„ÅÆÁ¢∫Ë™ç
 */
function checkEnvironmentVariables() {
  const requiredVars = [
    'VERCEL_TOKEN',
    'GITHUB_TOKEN'
  ];

  const optionalVars = [
    'VERCEL_PROJECT_ID'
  ];

  log(colors.blue, 'üìã Checking environment variables for testing...');
  
  let hasRequired = true;
  
  for (const varName of requiredVars) {
    if (process.env[varName]) {
      log(colors.green, `‚úÖ ${varName} is set`);
    } else {
      log(colors.yellow, `‚ö†Ô∏è  ${varName} is not set (required for full functionality)`);
      hasRequired = false;
    }
  }
  
  for (const varName of optionalVars) {
    if (process.env[varName]) {
      log(colors.green, `‚úÖ ${varName} is set`);
    } else {
      log(colors.blue, `‚ÑπÔ∏è  ${varName} is not set (will use default)`);
    }
  }
  
  return hasRequired;
}

/**
 * „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Çí‰ΩúÊàêÔºàÂÆüÈöõ„Å´„ÅØ„Ç≥„Éü„ÉÉ„Éà„Åó„Å™„ÅÑÔºâ
 */
function simulateDevPush() {
  const currentBranch = getCurrentBranch();
  
  if (currentBranch !== 'dev') {
    log(colors.yellow, `‚ö†Ô∏è  Current branch is '${currentBranch}', not 'dev'`);
    log(colors.yellow, '   To test the full workflow, switch to dev branch and push changes');
    return false;
  }
  
  const isClean = checkGitStatus();
  if (isClean) {
    log(colors.blue, '‚ÑπÔ∏è  Working directory is clean - no changes to push');
    log(colors.blue, '   To test the full workflow, make a change and push to dev branch');
    return false;
  } else {
    log(colors.yellow, '‚ö†Ô∏è  There are uncommitted changes');
    log(colors.yellow, '   Commit and push to dev branch to trigger the Preview deployment workflow');
    return false;
  }
}

/**
 * „É°„Ç§„É≥„ÉÜ„Çπ„ÉàÂá¶ÁêÜ
 */
async function main() {
  log(colors.blue, 'üß™ Testing Vercel Preview Environment Workflow...');
  log(colors.blue, '');

  const checks = [
    { name: 'Vercel Configuration', fn: checkVercelConfig },
    { name: 'GitHub Actions Workflow', fn: checkGitHubActions },
    { name: 'Script Files', fn: checkScriptFiles },
    { name: 'Package Scripts', fn: checkPackageScripts },
    { name: 'Environment Variables', fn: checkEnvironmentVariables }
  ];

  let allPassed = true;
  
  for (const check of checks) {
    log(colors.blue, `üîç Checking ${check.name}...`);
    const result = check.fn();
    if (!result) {
      allPassed = false;
    }
    log(colors.blue, '');
  }

  // GitÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç
  log(colors.blue, 'üîç Checking Git status...');
  const currentBranch = getCurrentBranch();
  if (currentBranch) {
    log(colors.blue, `üìã Current branch: ${currentBranch}`);
  }
  simulateDevPush();
  log(colors.blue, '');

  // ÁµêÊûú„Çµ„Éû„É™„Éº
  if (allPassed) {
    log(colors.green, 'üéâ All checks passed!');
    log(colors.green, '');
    log(colors.green, '‚úÖ Preview environment workflow is properly configured');
    log(colors.green, '‚úÖ All required files and scripts are in place');
    log(colors.green, '‚úÖ GitHub Actions workflow includes Preview URL generation');
    log(colors.green, '');
    log(colors.blue, 'ÔøΩÔøΩ To test the full workflow:');
    log(colors.blue, '   1. Switch to dev branch: git switch dev');
    log(colors.blue, '   2. Make a change and commit it');
    log(colors.blue, '   3. Push to dev branch: git push origin dev');
    log(colors.blue, '   4. Check GitHub Actions for Preview URL generation');
    log(colors.blue, '   5. Verify Preview URL is commented on related PRs');
  } else {
    log(colors.red, '‚ùå Some checks failed');
    log(colors.red, '   Please fix the issues above before testing the workflow');
    process.exit(1);
  }

  // ÊâãÂãï„ÉÜ„Çπ„Éà„ÅÆÊèêÊ°à
  log(colors.blue, '');
  log(colors.blue, 'üîß Manual testing commands:');
  log(colors.blue, '   npm run preview:verify  # Verify Preview environment configuration');
  log(colors.blue, '   npm run preview:url     # Get Preview URL for current commit (requires VERCEL_TOKEN)');
}

// „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    log(colors.red, `‚ùå Test failed: ${error.message}`);
    process.exit(1);
  });
}

export { main as testPreviewWorkflow };