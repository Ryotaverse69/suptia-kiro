name: Vercel Production Deploy

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: vercel-production-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'

jobs:
  deploy:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --yes'
          working-directory: ./

      - name: Wait for Deployment to be Ready
        run: |
          echo "Deployment URL: ${{ steps.vercel-deploy.outputs.preview-url }}"
          echo "Waiting for deployment to be ready..."
          
          # „Çà„ÇäÈï∑„ÅÑÂæÖÊ©üÊôÇÈñì„Å®„É™„Éà„É©„Ç§Ê©üËÉΩ
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Waiting 30 seconds..."
            sleep 30
            
            if [ -n "${{ steps.vercel-deploy.outputs.preview-url }}" ]; then
              if curl -f -s "${{ steps.vercel-deploy.outputs.preview-url }}" > /dev/null 2>&1; then
                echo "‚úÖ Deployment is ready!"
                break
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "‚ö†Ô∏è Deployment readiness check timed out, but continuing..."
          fi

      - name: Install dependencies for verification
        run: |
          cd apps/web
          npm install chalk axios

      - name: Verify Production Deployment
        id: verify-deployment
        env:
          DEPLOYMENT_URL: ${{ steps.vercel-deploy.outputs.preview-url }}
        run: |
          echo "üîç Verifying deployment..."
          echo "Deployment URL: $DEPLOYMENT_URL"
          
          if [ -n "$DEPLOYMENT_URL" ]; then
            # „Çà„ÇäË©≥Á¥∞„Å™Ê§úË®º
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
            echo "HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Deployment is accessible with HTTP 200"
              
              # Vercel„Éò„ÉÉ„ÉÄ„Éº„ÅÆÁ¢∫Ë™ç
              VERCEL_ID=$(curl -s -I "$DEPLOYMENT_URL" | grep -i "x-vercel-id" | cut -d' ' -f2 | tr -d '\r\n' || echo "")
              if [ -n "$VERCEL_ID" ]; then
                echo "‚úÖ Vercel deployment ID: $VERCEL_ID"
                echo "vercel_id=$VERCEL_ID" >> $GITHUB_OUTPUT
              fi
              
              echo "deployment_status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Deployment verification failed with HTTP $HTTP_STATUS"
              echo "deployment_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ùå No deployment URL found"
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Advanced Deployment Monitoring
        id: monitor-deployment
        continue-on-error: true
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "üîç È´òÂ∫¶„Å™„Éá„Éó„É≠„Ç§Áõ£Ë¶ñ„ÇíÂÆüË°å‰∏≠..."
          
          # Áõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà„ÅÆÂÆüË°å
          if [ -f "scripts/monitor-deployment.mjs" ]; then
            if node scripts/monitor-deployment.mjs; then
              echo "‚úÖ „Éá„Éó„É≠„Ç§Áõ£Ë¶ñÂÆå‰∫Ü"
              echo "monitoring_status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è „Éá„Éó„É≠„Ç§Áõ£Ë¶ñ„ÅßÂïèÈ°å„ÇíÊ§úÂá∫"
              echo "monitoring_status=warning" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Áõ£Ë¶ñ„Çπ„ÇØ„É™„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
            echo "monitoring_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Test Custom Domain
        id: test-domain
        continue-on-error: true
        run: |
          echo "üîç Testing custom domain..."
          
          # „Çà„ÇäÈï∑„ÅÑÂæÖÊ©üÊôÇÈñì„Åß„Éâ„É°„Ç§„É≥‰ºùÊí≠„ÇíÂæÖ„Å§
          echo "Waiting for domain propagation..."
          sleep 60
          
          # suptia.com „ÅÆ„ÉÜ„Çπ„ÉàÔºàË§áÊï∞Âõû„É™„Éà„É©„Ç§Ôºâ
          DOMAIN_ATTEMPTS=5
          DOMAIN_SUCCESS=false
          
          for i in $(seq 1 $DOMAIN_ATTEMPTS); do
            echo "Testing suptia.com (attempt $i/$DOMAIN_ATTEMPTS)..."
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://suptia.com || echo "000")
            echo "suptia.com HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ suptia.com is accessible"
              
              # Vercel„Éò„ÉÉ„ÉÄ„Éº„ÅÆÁ¢∫Ë™ç
              VERCEL_ID=$(curl -s -I https://suptia.com | grep -i "x-vercel-id" | cut -d' ' -f2 | tr -d '\r\n' || echo "")
              if [ -n "$VERCEL_ID" ]; then
                echo "‚úÖ suptia.com Vercel ID: $VERCEL_ID"
              fi
              
              DOMAIN_SUCCESS=true
              break
            else
              echo "‚ö†Ô∏è suptia.com returned HTTP $HTTP_STATUS"
              if [ $i -lt $DOMAIN_ATTEMPTS ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          
          if [ "$DOMAIN_SUCCESS" = "true" ]; then
            echo "domain_status=success" >> $GITHUB_OUTPUT
          else
            echo "domain_status=pending" >> $GITHUB_OUTPUT
          fi
          
          # www.suptia.com „ÅÆ„ÉÜ„Çπ„Éà
          WWW_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://www.suptia.com || echo "000")
          echo "www.suptia.com HTTP Status: $WWW_STATUS"
          
          if [ "$WWW_STATUS" = "200" ] || [ "$WWW_STATUS" = "301" ] || [ "$WWW_STATUS" = "302" ]; then
            echo "‚úÖ www.suptia.com is accessible"
          else
            echo "‚ö†Ô∏è www.suptia.com returned HTTP $WWW_STATUS"
          fi

      - name: Create Success Comment
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_URL: ${{ steps.vercel-deploy.outputs.preview-url }}
          DOMAIN_STATUS: ${{ steps.test-domain.outputs.domain_status }}
          VERCEL_ID: ${{ steps.verify-deployment.outputs.vercel_id }}
        run: |
          # ÊúÄÊñ∞„ÅÆPR„Å´„Ç≥„É°„É≥„Éà„ÇíËøΩÂä†Ôºà„ÇÇ„Åó„ÅÇ„Çå„Å∞Ôºâ
          LATEST_PR=$(gh pr list --state merged --limit 1 --json number --jq '.[0].number' || echo "")
          
          DOMAIN_EMOJI="${{ steps.test-domain.outputs.domain_status == 'success' && '‚úÖ' || '‚ö†Ô∏è' }}"
          DOMAIN_TEXT="${{ steps.test-domain.outputs.domain_status == 'success' && 'Ready' || 'Propagating' }}"
          
          cat > comment_body.txt << 'EOF'
          üöÄ Production Deployment Successful
          
          Deployment Details:
          - üîó Deployment URL: $DEPLOYMENT_URL
          - üÜî Vercel ID: `${VERCEL_ID:-'N/A'}`
          - üìù Commit: `${{ github.sha }}`
          - üåê Domain Status: $DOMAIN_EMOJI $DOMAIN_TEXT
          - ‚è∞ Deployed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Production URLs:
          - üåç [suptia.com](https://suptia.com)
          - üåç [www.suptia.com](https://www.suptia.com)
          
          The production environment has been successfully updated!
          EOF
          
          COMMENT_BODY=$(cat comment_body.txt)
          
          if [ -n "$LATEST_PR" ]; then
            gh pr comment $LATEST_PR --body "$COMMENT_BODY" || echo "Could not add comment to PR"
          else
            echo "No recent PR found, skipping comment"
          fi
          
          # Deployment summary
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment URL: $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "- Domain Status: $DOMAIN_EMOJI $DOMAIN_TEXT" >> $GITHUB_STEP_SUMMARY
          echo "- Vercel ID: \`${VERCEL_ID:-'N/A'}\`" >> $GITHUB_STEP_SUMMARY

      - name: Auto Recovery Attempt
        if: failure()
        id: auto-recovery
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "üîÑ Ëá™ÂãïÂæ©Êóß„ÇíË©¶Ë°å‰∏≠..."
          
          # Ëá™ÂãïÂæ©Êóß„Çπ„ÇØ„É™„Éó„Éà„ÅÆÂÆüË°å
          if [ -f "scripts/auto-recovery.mjs" ]; then
            if node scripts/auto-recovery.mjs; then
              echo "‚úÖ Ëá™ÂãïÂæ©Êóß„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü"
              echo "recovery_status=success" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Ëá™ÂãïÂæ©Êóß„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
              echo "recovery_status=failed" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è Ëá™ÂãïÂæ©Êóß„Çπ„ÇØ„É™„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
            echo "recovery_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Notify Deployment Failure
        if: failure() && steps.auto-recovery.outputs.recovery_status != 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ùå Production deployment failed and auto-recovery unsuccessful"
          
          # Create an issue for deployment failure
          gh issue create \
            --title "üö® Production Deployment Failed - $(date '+%Y-%m-%d %H:%M')" \
            --body "Production deployment failed. Check workflow logs for details." \
            --label "deployment,production,urgent,auto-recovery-failed" \
            --assignee "${{ github.actor }}" || echo "Could not create issue"

      - name: Upload Deployment Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vercel-production-deployment-logs
          path: |
            vercel-*.log
            deployment-*.json
          retention-days: 30