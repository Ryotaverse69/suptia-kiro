name: Performance Budget Check

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/web/src/**/*.{ts,tsx,js,jsx}'
      - 'apps/web/src/**/*.css'
      - 'apps/web/package.json'
      - 'lighthouse-budget.json'
      - 'lighthouserc.js'
      - '.github/workflows/performance-check.yml'
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/src/**/*.{ts,tsx,js,jsx}'
      - 'apps/web/src/**/*.css'
      - 'apps/web/package.json'
      - 'lighthouse-budget.json'
      - 'lighthouserc.js'

jobs:
  performance-tests:
    name: Performance Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          cd apps/web
          npm run test -- --run apps/web/src/__tests__/performance/ --reporter=verbose

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: apps/web/test-results/
          retention-days: 7

  lighthouse-budget:
    name: Lighthouse Budget Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          cd apps/web
          npm run build

      - name: Start application
        run: |
          cd apps/web
          npm run start &
          sleep 10
        env:
          NODE_ENV: production

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          lhci autorun --config=lighthouserc.js || echo "lighthouse_failed=true" >> $GITHUB_OUTPUT
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let lighthouseResults = '';
            try {
              // Try to read Lighthouse results
              const resultsDir = '.lighthouseci';
              if (fs.existsSync(resultsDir)) {
                const files = fs.readdirSync(resultsDir);
                const manifestFile = files.find(f => f.includes('manifest.json'));
                if (manifestFile) {
                  const manifest = JSON.parse(fs.readFileSync(path.join(resultsDir, manifestFile), 'utf8'));
                  lighthouseResults = `Found ${manifest.length} Lighthouse reports`;
                }
              }
            } catch (error) {
              lighthouseResults = 'Could not read Lighthouse results';
            }
            
            const lighthousFailed = '${{ steps.lighthouse.outputs.lighthouse_failed }}' === 'true';
            
            let commentBody = '';
            
            if (lighthousFailed) {
              commentBody = `## ‚ö†Ô∏è Lighthouse Budget Check - Warnings Found
            
            Some performance metrics exceeded the budget thresholds, but this is treated as a warning.
            
            **Budget Thresholds:**
            - LCP (Largest Contentful Paint): ‚â§2.5s
            - TBT (Total Blocking Time): ‚â§200ms
            - CLS (Cumulative Layout Shift): ‚â§0.1
            - FCP (First Contentful Paint): ‚â§1.8s
            - JavaScript Bundle: ‚â§300KB
            
            **Next Steps:**
            1. Review the detailed Lighthouse report in the artifacts
            2. Consider optimizing images, reducing JavaScript bundle size, or implementing lazy loading
            3. Check the performance test results for specific optimization opportunities
            
            ${lighthouseResults}
            
            ### üöÄ Performance Optimization Tips
            - Use \`next/image\` for automatic image optimization
            - Implement code splitting with dynamic imports
            - Use React.memo for expensive components
            - Consider lazy loading for non-critical content
            `;
            } else {
              commentBody = `## ‚úÖ Lighthouse Budget Check Passed
            
            All performance metrics are within budget thresholds!
            
            **Budget Compliance:**
            - ‚úÖ LCP ‚â§2.5s
            - ‚úÖ TBT ‚â§200ms  
            - ‚úÖ CLS ‚â§0.1
            - ‚úÖ FCP ‚â§1.8s
            - ‚úÖ JavaScript Bundle ‚â§300KB
            
            ${lighthouseResults}
            
            Great job maintaining performance! üéâ
            `;
            }
            
            // Find existing performance comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Lighthouse Budget Check')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          cd apps/web
          npm run build
          
          # Generate bundle analysis
          npx next-bundle-analyzer || true
          
          # Check bundle sizes
          echo "## Bundle Size Analysis" > bundle-report.md
          echo "" >> bundle-report.md
          
          # Get JavaScript bundle sizes
          find .next/static/chunks -name "*.js" -exec ls -lh {} \; | \
            awk '{print "- " $9 ": " $5}' >> bundle-report.md
          
          echo "" >> bundle-report.md
          echo "### Total JavaScript Size" >> bundle-report.md
          
          TOTAL_JS_SIZE=$(find .next/static -name "*.js" -exec cat {} \; | wc -c)
          TOTAL_JS_KB=$((TOTAL_JS_SIZE / 1024))
          
          echo "Total: ${TOTAL_JS_KB}KB" >> bundle-report.md
          
          if [ $TOTAL_JS_KB -gt 300 ]; then
            echo "‚ö†Ô∏è **Warning**: Bundle size (${TOTAL_JS_KB}KB) exceeds budget (300KB)" >> bundle-report.md
            echo "bundle_over_budget=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Bundle size is within budget" >> bundle-report.md
            echo "bundle_over_budget=false" >> $GITHUB_OUTPUT
          fi
          
          echo "bundle_size_kb=${TOTAL_JS_KB}" >> $GITHUB_OUTPUT

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            apps/web/bundle-report.md
            apps/web/.next/analyze/
          retention-days: 7

      - name: Comment PR with bundle analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let bundleReport = '';
            try {
              bundleReport = fs.readFileSync('apps/web/bundle-report.md', 'utf8');
            } catch (error) {
              bundleReport = 'Could not read bundle analysis report';
            }
            
            const bundleOverBudget = '${{ steps.bundle-analysis.outputs.bundle_over_budget }}' === 'true';
            const bundleSizeKB = '${{ steps.bundle-analysis.outputs.bundle_size_kb }}';
            
            let commentBody = `## üì¶ Bundle Size Analysis
            
            **Current Bundle Size:** ${bundleSizeKB}KB
            **Budget:** 300KB
            **Status:** ${bundleOverBudget ? '‚ö†Ô∏è Over Budget' : '‚úÖ Within Budget'}
            
            <details>
            <summary>üìã Detailed Bundle Report</summary>
            
            ${bundleReport}
            
            </details>
            
            ${bundleOverBudget ? `
            ### üîß Bundle Size Optimization Tips
            - Use dynamic imports for code splitting
            - Remove unused dependencies
            - Use tree shaking to eliminate dead code
            - Consider lazy loading for non-critical components
            - Optimize images and use next/image
            ` : ''}
            `;
            
            // Find existing bundle comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Bundle Size Analysis')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [performance-tests, lighthouse-budget, bundle-analysis]
    if: always()
    
    steps:
      - name: Generate performance summary
        run: |
          echo "## üöÄ Performance Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Performance Tests
          if [ "${{ needs.performance-tests.result }}" = "success" ]; then
            echo "‚úÖ **Performance Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Performance Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lighthouse Budget
          if [ "${{ needs.lighthouse-budget.result }}" = "success" ]; then
            echo "‚úÖ **Lighthouse Budget:** Within limits" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Lighthouse Budget:** Some metrics exceeded (warnings only)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Bundle Analysis
          if [ "${{ needs.bundle-analysis.result }}" = "success" ]; then
            echo "‚úÖ **Bundle Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Bundle Analysis:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size:** ${{ needs.bundle-analysis.outputs.bundle_size_kb }}KB (Budget: 300KB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** Unit tests for calculation efficiency" >> $GITHUB_STEP_SUMMARY
          echo "- **Lighthouse:** Web Vitals and performance budget compliance" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Reports Available" >> $GITHUB_STEP_SUMMARY
          echo "- Performance test results" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse audit reports" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle size analysis" >> $GITHUB_STEP_SUMMARY