name: CI Quality Gates

on:
  pull_request:
    branches: [master]

env:
  NODE_VERSION: '20'

jobs:
  format:
    name: format:check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Check formatting
        run: npm run format:check
        working-directory: apps/web

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Run linter
        run: npm run lint
        working-directory: apps/web

  typecheck:
    name: typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Type check
        run: npm run typecheck
        working-directory: apps/web

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Run tests
        run: npm run test
        working-directory: apps/web

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Build application
        run: npm run build
        working-directory: apps/web

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: apps/web/.next
          retention-days: 1

  headers:
    name: headers
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: apps/web/.next

      - name: Build application
        run: npm run build
        working-directory: apps/web

      - name: Start application
        run: npm start &
        working-directory: apps/web

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Check security headers
        run: npm run headers:check
        working-directory: apps/web

  jsonld:
    name: jsonld
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: apps/web/.next

      - name: Build application
        run: npm run build
        working-directory: apps/web

      - name: Start application
        run: npm start &
        working-directory: apps/web

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Validate JSON-LD
        run: npm run jsonld:check
        working-directory: apps/web

  audit:
    name: audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Security audit
        run: npm run audit:ci
        working-directory: apps/web

  lighthouse:
    name: lighthouse (non-blocking)
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci
        working-directory: apps/web

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: apps/web/.next

      - name: Build application
        run: npm run build
        working-directory: apps/web

      - name: Start application
        run: npm start &
        working-directory: apps/web

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Run Lighthouse CI
        run: npx @lhci/cli autorun --collect.staticDistDir=. --upload.target=temporary-public-storage
        working-directory: apps/web