import { describe, it, expect } from "vitest";
import { render, screen } from "@testing-library/react";
import {
  WarningHighlight,
  WarningCountDisplay,
  WarningIndicator,
  WarningComparisonSummary,
} from "../WarningHighlight";
import type { Warning, WarningAnalysis } from "@/lib/compare/warning-analyzer";

describe("WarningCountDisplay", () => {
  it("Ë≠¶Âëä„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄåË≠¶Âëä„Å™„Åó„Äç„ÇíË°®Á§∫„Åô„Çã", () => {
    render(<WarningCountDisplay count={0} severity="mixed" />);

    expect(screen.getByText("‚úì Ë≠¶Âëä„Å™„Åó")).toBeInTheDocument();
    expect(screen.getByLabelText("Ë≠¶Âëä„Å™„Åó")).toBeInTheDocument();
  });

  it("Ë≠¶Âëä‰ª∂Êï∞„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    render(<WarningCountDisplay count={3} severity="critical" />);

    expect(screen.getByText("3‰ª∂")).toBeInTheDocument();
    expect(screen.getByLabelText("Ë≠¶Âëä 3 ‰ª∂")).toBeInTheDocument();
  });

  it("ÈáçË¶ÅÂ∫¶„Å´Âøú„Åò„Åü„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã", () => {
    const { rerender } = render(
      <WarningCountDisplay count={1} severity="critical" />,
    );

    let element = screen.getByLabelText("Ë≠¶Âëä 1 ‰ª∂");
    expect(element).toHaveClass("bg-red-100", "text-red-800", "border-red-200");

    rerender(<WarningCountDisplay count={1} severity="warning" />);
    element = screen.getByLabelText("Ë≠¶Âëä 1 ‰ª∂");
    expect(element).toHaveClass(
      "bg-orange-100",
      "text-orange-800",
      "border-orange-200",
    );

    rerender(<WarningCountDisplay count={1} severity="info" />);
    element = screen.getByLabelText("Ë≠¶Âëä 1 ‰ª∂");
    expect(element).toHaveClass(
      "bg-blue-100",
      "text-blue-800",
      "border-blue-200",
    );
  });
});

describe("WarningIndicator", () => {
  const mockWarning: Warning = {
    id: "w1",
    type: "critical",
    category: "pregnancy",
    message: "Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
    severity: 9,
    productId: "p1",
  };

  it("Ë≠¶ÂëäÊÉÖÂ†±„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    render(<WarningIndicator warning={mockWarning} />);

    expect(screen.getByText("pregnancy")).toBeInTheDocument();
    expect(
      screen.getByLabelText("ÈáçË¶Å„Å™Ë≠¶Âëä: Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ"),
    ).toBeInTheDocument();
  });

  it("„Éè„Ç§„É©„Ç§„ÉàË°®Á§∫„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã", () => {
    render(<WarningIndicator warning={mockWarning} isHighlighted={true} />);

    const element = screen.getByLabelText(
      "ÈáçË¶Å„Å™Ë≠¶Âëä: Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
    );
    expect(element).toHaveClass("ring-2", "ring-yellow-400");
  });

  it("Ë≠¶Âëä„Çø„Ç§„Éó„Å´Âøú„Åò„Åü„Ç¢„Ç§„Ç≥„É≥„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
    const { rerender } = render(<WarningIndicator warning={mockWarning} />);

    expect(screen.getByText("üö®")).toBeInTheDocument();

    const warningType: Warning = { ...mockWarning, type: "warning" };
    rerender(<WarningIndicator warning={warningType} />);
    expect(screen.getByText("‚ö†Ô∏è")).toBeInTheDocument();

    const infoType: Warning = { ...mockWarning, type: "info" };
    rerender(<WarningIndicator warning={infoType} />);
    expect(screen.getByText("‚ÑπÔ∏è")).toBeInTheDocument();
  });
});

describe("WarningHighlight", () => {
  const mockWarnings: Warning[] = [
    {
      id: "w1",
      type: "critical",
      category: "pregnancy",
      message: "Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
      severity: 9,
      productId: "p1",
    },
    {
      id: "w2",
      type: "warning",
      category: "medication",
      message: "Ëñ¨Áâ©Áõ∏‰∫í‰ΩúÁî®„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô",
      severity: 6,
      productId: "p1",
    },
    {
      id: "w3",
      type: "info",
      category: "elderly",
      message: "È´òÈΩ¢ËÄÖ„ÅØÊ≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô",
      severity: 3,
      productId: "p1",
    },
  ];

  it("Ë≠¶Âëä„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄåË≠¶Âëä„Å™„Åó„Äç„ÇíË°®Á§∫„Åô„Çã", () => {
    render(
      <WarningHighlight warnings={[]} productId="p1" productName="Product A" />,
    );

    expect(screen.getByText("‚úì Ë≠¶Âëä„Å™„Åó")).toBeInTheDocument();
  });

  it("Ë≠¶Âëä‰ª∂Êï∞„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    render(
      <WarningHighlight
        warnings={mockWarnings}
        productId="p1"
        productName="Product A"
        showCount={true}
      />,
    );

    expect(screen.getByText("3‰ª∂")).toBeInTheDocument();
    expect(screen.getByText("ÈáçË¶Å1")).toBeInTheDocument();
    expect(screen.getByText("Ë≠¶Âëä1")).toBeInTheDocument();
    expect(screen.getByText("ÊÉÖÂ†±1")).toBeInTheDocument();
  });

  it("ÊúÄÈáçË¶ÅË≠¶Âëä„Çí„Éè„Ç§„É©„Ç§„ÉàË°®Á§∫„Åô„Çã", () => {
    render(
      <WarningHighlight
        warnings={mockWarnings}
        productId="p1"
        productName="Product A"
        showMostImportant={true}
      />,
    );

    expect(screen.getByText("ÊúÄÈáçË¶ÅË≠¶Âëä:")).toBeInTheDocument();
    expect(
      screen.getByText("Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ"),
    ).toBeInTheDocument();
  });

  it("„Ç≥„É≥„Éë„ÇØ„Éà„É¢„Éº„Éâ„ÅßÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    render(
      <WarningHighlight
        warnings={mockWarnings}
        productId="p1"
        productName="Product A"
        compact={true}
      />,
    );

    expect(screen.getByText("3‰ª∂")).toBeInTheDocument();
    expect(screen.queryByText("ÊúÄÈáçË¶ÅË≠¶Âëä:")).not.toBeInTheDocument();
  });

  it("ÂÖ®Ë≠¶Âëä„É™„Çπ„Éà„ÇíË°®Á§∫„Åô„ÇãÔºàÈùû„Ç≥„É≥„Éë„ÇØ„Éà„É¢„Éº„ÉâÔºâ", () => {
    render(
      <WarningHighlight
        warnings={mockWarnings}
        productId="p1"
        productName="Product A"
        compact={false}
      />,
    );

    expect(screen.getByText("ÂÖ®„Å¶„ÅÆË≠¶Âëä:")).toBeInTheDocument();
    expect(screen.getAllByText("pregnancy")).toHaveLength(2); // ÊúÄÈáçË¶ÅË≠¶Âëä„Å®ÂÖ®Ë≠¶Âëä„É™„Çπ„Éà„ÅÆ‰∏°Êñπ„Å´Ë°®Á§∫
    expect(screen.getByText("medication")).toBeInTheDocument();
    expect(screen.getByText("elderly")).toBeInTheDocument();
  });

  it("„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Â±ûÊÄß„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã", () => {
    render(
      <WarningHighlight
        warnings={mockWarnings}
        productId="p1"
        productName="Product A"
      />,
    );

    expect(screen.getByLabelText("Product A„ÅÆË≠¶ÂëäÊÉÖÂ†±")).toBeInTheDocument();

    // „Çπ„ÇØ„É™„Éº„É≥„É™„Éº„ÉÄ„ÉºÁî®„ÅÆË©≥Á¥∞ÊÉÖÂ†±
    const srText = screen.getByText((content, element) => {
      return (
        element?.classList.contains("sr-only") &&
        content.includes("Product A„Å´„ÅØ3‰ª∂„ÅÆË≠¶Âëä„Åå„ÅÇ„Çä„Åæ„Åô")
      );
    });
    expect(srText).toBeInTheDocument();
  });

  it("ÈáçË¶ÅÂ∫¶„ÅÆÈ†ÜÂ∫è„ÅåÊ≠£„Åó„ÅèÂà§ÂÆö„Åï„Çå„Çã", () => {
    const mixedWarnings: Warning[] = [
      { ...mockWarnings[1], severity: 8 }, // warning with high severity
      { ...mockWarnings[0], severity: 6 }, // critical with lower severity
    ];

    render(
      <WarningHighlight
        warnings={mixedWarnings}
        productId="p1"
        productName="Product A"
        showMostImportant={true}
      />,
    );

    // severity 8„ÅÆÊñπ„ÅåÈ´ò„ÅÑ„ÅÆ„Åß„ÄÅwarning„Çø„Ç§„Éó„Åß„ÇÇÊúÄÈáçË¶Å„Å´„Å™„Çã
    expect(
      screen.getByText("Ëñ¨Áâ©Áõ∏‰∫í‰ΩúÁî®„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô"),
    ).toBeInTheDocument();
  });
});

describe("WarningComparisonSummary", () => {
  const mockAnalysis: WarningAnalysis = {
    totalWarnings: 5,
    criticalWarnings: [
      {
        id: "w1",
        type: "critical",
        category: "pregnancy",
        message: "Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
        severity: 9,
        productId: "p1",
      },
    ],
    mostImportantWarning: {
      id: "w1",
      type: "critical",
      category: "pregnancy",
      message: "Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ",
      severity: 9,
      productId: "p1",
    },
    warningsByProduct: {},
    warningsByCategory: {},
    severitySummary: {
      critical: 2,
      warning: 2,
      info: 1,
    },
  };

  it("Ë≠¶Âëä„Çµ„Éû„É™„Éº„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    render(<WarningComparisonSummary warningAnalysis={mockAnalysis} />);

    expect(screen.getByText("Ë≠¶Âëä„Çµ„Éû„É™„Éº")).toBeInTheDocument();
    expect(screen.getByText("ÂêàË®à 5 ‰ª∂")).toBeInTheDocument();
    expect(screen.getByText("ÈáçË¶Å 2")).toBeInTheDocument();
    expect(screen.getByText("Ë≠¶Âëä 2")).toBeInTheDocument();
    expect(screen.getByText("ÊÉÖÂ†± 1")).toBeInTheDocument();
  });

  it("ÊúÄÈáçË¶ÅË≠¶Âëä„ÇíË°®Á§∫„Åô„Çã", () => {
    render(<WarningComparisonSummary warningAnalysis={mockAnalysis} />);

    expect(screen.getByText("ÊúÄÈáçË¶ÅË≠¶Âëä:")).toBeInTheDocument();
    expect(
      screen.getByText("Â¶äÂ®†‰∏≠„ÅÆ‰ΩøÁî®„ÅØÈÅø„Åë„Å¶„Åè„Å†„Åï„ÅÑ"),
    ).toBeInTheDocument();
  });

  it("Ë≠¶Âëä„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã", () => {
    const noWarningsAnalysis: WarningAnalysis = {
      totalWarnings: 0,
      criticalWarnings: [],
      mostImportantWarning: undefined,
      warningsByProduct: {},
      warningsByCategory: {},
      severitySummary: {
        critical: 0,
        warning: 0,
        info: 0,
      },
    };

    render(<WarningComparisonSummary warningAnalysis={noWarningsAnalysis} />);

    expect(
      screen.getByText("ÊØîËºÉÂØæË±°„ÅÆË£ΩÂìÅ„Å´Ë≠¶Âëä„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì"),
    ).toBeInTheDocument();
  });

  it("ÈáçË¶ÅÂ∫¶Âà•„ÅÆ‰ª∂Êï∞„Åå0„ÅÆÂ†¥Âêà„ÅØË°®Á§∫„Åó„Å™„ÅÑ", () => {
    const partialAnalysis: WarningAnalysis = {
      ...mockAnalysis,
      severitySummary: {
        critical: 1,
        warning: 0,
        info: 0,
      },
    };

    render(<WarningComparisonSummary warningAnalysis={partialAnalysis} />);

    expect(screen.getByText("ÈáçË¶Å 1")).toBeInTheDocument();
    expect(screen.queryByText("Ë≠¶Âëä 0")).not.toBeInTheDocument();
    expect(screen.queryByText("ÊÉÖÂ†± 0")).not.toBeInTheDocument();
  });
});
